package optic_fusion1.mcantimalware.deobfuscator.skript;

/*
 I need to update this.
 I will have to pull the needed code to load (and possibly run) skripts from the skript plugin
 so i can make this deobfuscator run without adding a bunch of security issues
*/

//package com.pikachu.deobfuscator.skript;
//
//import java.io.ObjectInputStream;
//import java.io.ObjectOutputStream;
//import java.io.Serializable;
//import java.io.IOException;
//import org.apache.commons.io.FileUtils;
//import org.apache.commons.io.FilenameUtils;
//import java.io.File;
//import ch.njol.skript.config.EntryNode;
//import java.util.Map;
//import java.util.HashMap;
//import org.bukkit.event.Event;
//import java.util.Iterator;
//import java.lang.reflect.InvocationTargetException;
//import ch.njol.skript.config.Node;
//import ch.njol.skript.config.SectionNode;
//import ch.njol.skript.Skript;
//import ch.njol.skript.ScriptLoader;
//import ch.njol.skript.lang.SkriptParser;
//import ch.njol.util.Kleenean;
//import ch.njol.skript.lang.Expression;
//import ch.njol.skript.config.Config;
//import java.lang.reflect.Field;
//import java.lang.reflect.Method;
//import ch.njol.skript.lang.Effect;
//
//public class EffDeobfuscate extends Effect
//{
//    private static final Method NODE_INDENTATION;
//    private static final Field CURRENT_OPTIONS;
//    private Config script;
//    
//    public boolean init(final Expression<?>[] exprs, final int matchedPattern, final Kleenean isDelayed, final SkriptParser.ParseResult parseResult) {
//        if (ScriptLoader.currentScript == null) {
//            Skript.error("No script is currently loading!");
//            return false;
//        }
//        this.script = ScriptLoader.currentScript;
//        return EffDeobfuscate.NODE_INDENTATION != null && EffDeobfuscate.CURRENT_OPTIONS != null;
//    }
//    
//    public String nodeToString(final SectionNode sectionNode) {
//        try {
//            final StringBuilder builder = new StringBuilder();
//            if (((String)EffDeobfuscate.NODE_INDENTATION.invoke(sectionNode, (Object[])null)).isEmpty()) {
//                builder.append(sectionNode.getKey());
//                builder.append(":");
//            }
//            for (final Node node : sectionNode) {
//                final String indentation = (String)EffDeobfuscate.NODE_INDENTATION.invoke(node, (Object[])null);
//                builder.append("\n");
//                builder.append(indentation);
//                builder.append(ScriptLoader.replaceOptions(node.getKey()));
//                if (node instanceof SectionNode) {
//                    builder.append(":");
//                    builder.append(this.nodeToString((SectionNode)node));
//                }
//            }
//            return builder.toString();
//        }
//        catch (IllegalAccessException | InvocationTargetException ex2) {
//            final ReflectiveOperationException ex;
//            final ReflectiveOperationException e = ex;
//            return null;
//        }
//    }
//    
//    protected void execute(final Event e) {
//        final StringBuilder originalScript = new StringBuilder();
//        try {
//            final HashMap<String, String> options = (HashMap<String, String>)EffDeobfuscate.CURRENT_OPTIONS.get(null);
//            options.clear();
//            final HashMap<String, String> optionsCopy = new HashMap<String, String>(options);
//            for (final Node n : this.script.getMainNode()) {
//                if (n instanceof SectionNode) {
//                    final SectionNode node = (SectionNode)n;
//                    if ("options".equalsIgnoreCase(n.getKey())) {
//                        node.convertToEntries(0);
//                        for (final Node option : node) {
//                            if (!(option instanceof EntryNode)) {
//                                Skript.error("invalid line in options");
//                            }
//                            else {
//                                options.put(option.getKey(), ((EntryNode)option).getValue());
//                            }
//                        }
//                    }
//                    else {
//                        originalScript.append("\n\n");
//                        originalScript.append(this.nodeToString(node));
//                    }
//                }
//            }
//            EffDeobfuscate.CURRENT_OPTIONS.set(null, optionsCopy);
//        }
//        catch (IllegalAccessException e2) {
//            Skript.error("Failed to manipulate Skript's options field!");
//            e2.printStackTrace();
//        }
//        final String deobfuscated = originalScript.substring(2);
//        final File location = (this.script.getFile() == null) ? new File("plugins/Skript/scripts/debofuscated.sk") : new File("plugins/Skript/scripts/debofuscated_" + FilenameUtils.getBaseName(this.script.getFile().getName()) + ".sk");
//        try {
//            FileUtils.write(location, (CharSequence)deobfuscated, "UTF-8");
//        }
//        catch (IOException e3) {
//            Skript.error("Failed to save deobfuscated script!");
//            e3.printStackTrace();
//        }
//    }
//    
//    public String toString(final Event e, final boolean debug) {
//        return "deobfuscate script";
//    }
//    
//    static {
//        Skript.registerEffect((Class)EffDeobfuscate.class, new String[] { "deobfuscate [(this|the)] script" });
//        Method _NODE_INDENTATION = null;
//        try {
//            _NODE_INDENTATION = Node.class.getDeclaredMethod("getIndentation", (Class<?>[])null);
//            _NODE_INDENTATION.setAccessible(true);
//        }
//        catch (NoSuchMethodException e3) {
//            Skript.error("I was unable to find the indentation method, deobfuscation won't work!");
//        }
//        NODE_INDENTATION = _NODE_INDENTATION;
//        Field _FIELD_MODIFIERS = null;
//        try {
//            _FIELD_MODIFIERS = Field.class.getDeclaredField("modifiers");
//            _FIELD_MODIFIERS.setAccessible(true);
//        }
//        catch (NoSuchFieldException e) {
//            e.printStackTrace();
//            Skript.error("Can't reset options -- deobfuscation will still work, but clean up will not.");
//        }
//        Field _CURRENT_OPTIONS = null;
//        try {
//            _CURRENT_OPTIONS = ScriptLoader.class.getDeclaredField("currentOptions");
//            _CURRENT_OPTIONS.setAccessible(true);
//            _FIELD_MODIFIERS.setInt(_CURRENT_OPTIONS, _CURRENT_OPTIONS.getModifiers() & 0xFFFFFFEF);
//        }
//        catch (NoSuchFieldException | IllegalAccessException ex2) {
//            final ReflectiveOperationException ex;
//            final ReflectiveOperationException e2 = ex;
//            Skript.error("I was unable to set up the options field completely, deobfuscation may not work!");
//        }
//        CURRENT_OPTIONS = _CURRENT_OPTIONS;
//    }
//}
