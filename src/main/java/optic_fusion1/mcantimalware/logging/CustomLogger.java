package optic_fusion1.mcantimalware.logging;

import java.util.ResourceBundle;
import java.util.function.Supplier;
import java.util.logging.Filter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

public class CustomLogger {

    private final Logger logger;

    private CustomLogger(String loggerName) {
        logger = Logger.getLogger(loggerName);
    }

    public static CustomLogger getLogger(String loggerName) {
        return new CustomLogger(loggerName);
    }

    public static CustomLogger getLogger(Class<?> clazz) {
        return new CustomLogger(clazz.getName());
    }

    public Logger getLogger() {
        return logger;
    }

    public void finest(String msg) {
        logger.finest(msg);
    }

    public void finer(String msg) {
        logger.finer(msg);
    }

    public void fine(String msg) {
        logger.fine(msg);
    }

    public void config(String msg) {
        logger.config(msg);
    }

    public void info(String msg) {
        logger.info(msg);
    }

    public void warning(String msg) {
        logger.warning(msg);
    }

    public void severe(String msg) {
        logger.severe(msg);
    }

    public void emergency(String msg) {
        logger.log(CustomLevel.EMERGENCY, msg);
    }

    public void alert(String msg) {
        logger.log(CustomLevel.ALERT, msg);
    }

    public void error(String msg) {
        logger.log(CustomLevel.ERROR, msg);
    }

    public void notice(String msg) {
        logger.log(CustomLevel.NOTICE, msg);
    }

    public void debug(String msg) {
        logger.log(CustomLevel.DEBUG, msg);
    }

    public void setParent(Logger parent) {
        logger.setParent(parent);
    }

    public Logger getParent() {
        return logger.getParent();
    }

    public void setResourceBundle(ResourceBundle bundle) {
        logger.setResourceBundle(bundle);
    }

    public boolean getUseParentHandlers() {
        return logger.getUseParentHandlers();
    }

    public void setUseParentHandlers(boolean useParentHandlers) {
        logger.setUseParentHandlers(useParentHandlers);
    }

    public Handler[] getHandlers() {
        return logger.getHandlers();
    }

    public void removeHandler(Handler handler) throws SecurityException {
        logger.removeHandler(handler);
    }

    public void addHandler(Handler handler) throws SecurityException {
        logger.addHandler(handler);
    }

    public String getName() {
        return logger.getName();
    }

    public boolean isLoggable(Level level) {
        return logger.isLoggable(level);
    }

    public Level getLevel() {
        return logger.getLevel();
    }

    public void setLevel(Level newLevel) throws SecurityException {
        logger.setLevel(newLevel);
    }

    public void finest(Supplier<String> msgSupplier) {
        logger.finest(msgSupplier);
    }

    public void finer(Supplier<String> msgSupplier) {
        logger.finer(msgSupplier);
    }

    public void fine(Supplier<String> msgSupplier) {
        logger.fine(msgSupplier);
    }

    public void config(Supplier<String> msgSupplier) {
        logger.config(msgSupplier);
    }

    public void info(Supplier<String> msgSupplier) {
        logger.info(msgSupplier);
    }

    public void warning(Supplier<String> msgSupplier) {
        logger.warning(msgSupplier);
    }

    public void severe(Supplier<String> msgSupplier) {
        logger.severe(msgSupplier);
    }

    public void throwing(String sourceClass, String sourceMethod, Throwable thrown) {
        logger.throwing(sourceClass, sourceMethod, thrown);
    }

    public void exiting(String sourceClass, String sourceMethod, Object result) {
        logger.exiting(sourceClass, sourceMethod, result);
    }

    public void exiting(String sourceClass, String sourceMethod) {
        logger.exiting(sourceClass, sourceMethod);
    }

    public void entering(String sourceClass, String sourceMethod, Object[] params) {
        logger.entering(sourceClass, sourceMethod, params);
    }

    public void entering(String sourceClass, String sourceMethod, Object param1) {
        logger.entering(sourceClass, sourceMethod, param1);
    }

    public void entering(String sourceClass, String sourceMethod) {
        logger.entering(sourceClass, sourceMethod);
    }

    public void logrb(Level level, String sourceClass, String sourceMethod, ResourceBundle bundle, String msg,
            Throwable thrown) {
        logger.logrb(level, sourceClass, sourceMethod, bundle, msg, thrown);
    }

    public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg,
            Throwable thrown) {
        logger.logrb(level, sourceClass, sourceMethod, bundleName, msg, thrown);
    }

    public void logrb(Level level, String sourceClass, String sourceMethod, ResourceBundle bundle, String msg,
            Object... params) {
        logger.logrb(level, sourceClass, sourceMethod, bundle, msg, params);
    }

    public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg,
            Object[] params) {
        logger.logrb(level, sourceClass, sourceMethod, bundleName, msg, params);
    }

    public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg,
            Object param1) {
        logger.logrb(level, sourceClass, sourceMethod, bundleName, msg, param1);
    }

    public void logrb(Level level, String sourceClass, String sourceMethod, String bundleName, String msg) {
        logger.logrb(level, sourceClass, sourceMethod, bundleName, msg);
    }

    public void logp(Level level, String sourceClass, String sourceMethod, Throwable thrown,
            Supplier<String> msgSupplier) {
        logger.logp(level, sourceClass, sourceMethod, thrown, msgSupplier);
    }

    public void logp(Level level, String sourceClass, String sourceMethod, String msg, Throwable thrown) {
        logger.logp(level, sourceClass, sourceMethod, msg, thrown);
    }

    public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object[] params) {
        logger.logp(level, sourceClass, sourceMethod, msg, params);
    }

    public void logp(Level level, String sourceClass, String sourceMethod, String msg, Object param1) {
        logger.logp(level, sourceClass, sourceMethod, msg, param1);
    }

    public void logp(Level level, String sourceClass, String sourceMethod, Supplier<String> msgSupplier) {
        logger.logp(level, sourceClass, sourceMethod, msgSupplier);
    }

    public void logp(Level level, String sourceClass, String sourceMethod, String msg) {
        logger.logp(level, sourceClass, sourceMethod, msg);
    }

    public void log(Level level, Throwable thrown, Supplier<String> msgSupplier) {
        logger.log(level, thrown, msgSupplier);
    }

    public void log(Level level, String msg, Throwable thrown) {
        logger.log(level, msg, thrown);
    }

    public void log(Level level, String msg, Object[] params) {
        logger.log(level, msg, params);
    }

    public void log(Level level, String msg, Object param1) {
        logger.log(level, msg, param1);
    }

    public void log(Level level, Supplier<String> msgSupplier) {
        logger.log(level, msgSupplier);
    }

    public void log(Level level, String msg) {
        logger.log(level, msg);
    }

    public void log(LogRecord record) {
        logger.log(record);
    }

    public Filter getFilter() {
        return logger.getFilter();
    }

    public void setFilter(Filter newFilter) throws SecurityException {
        logger.setFilter(newFilter);
    }

    public String getResourceBundleName() {
        return logger.getResourceBundleName();
    }

    public ResourceBundle getResourceBundle() {
        return logger.getResourceBundle();
    }

}
