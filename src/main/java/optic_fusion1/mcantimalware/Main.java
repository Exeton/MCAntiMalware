package optic_fusion1.mcantimalware;

import optic_fusion1.mcantimalware.utils.ZipUtils;
import optic_fusion1.mcantimalware.check.CheckRegistery;
import optic_fusion1.mcantimalware.check.CheckManager;
import optic_fusion1.mcantimalware.logging.ConsoleLogManager;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import static java.util.Arrays.asList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import jline.console.ConsoleReader;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import optic_fusion1.mcantimalware.logging.LoggerOutputStream;

public class Main implements Runnable {

    private File scriptsFile = new File("scripts");
    private File malPluginsFolder = new File("malplugins");
    private CheckManager checkManager;
    private Path path = Paths.get("");
    private DirectoryWatcherService watcher;
    private boolean zipMaliciousPlugins;
    private boolean showDebugMessages;
    private boolean maliciousPluginsFound = false;
    private List<File> maliciousPlugins = new ArrayList<>();
    private String[] args;
    private static CustomLogger logger = CustomLogger.getLogger(Main.class);
    private ConsoleReader reader;

    private void init() {
        logger.getLogger().setLevel(Level.ALL);
        File file = new File("AntiMalware");
        if (!file.exists()) {
            file.mkdirs();
        }
        File logFile = new File(file, "log.log");
        if (!logFile.exists()) {
            try {
                logFile.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            this.reader = new ConsoleReader();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConsoleLogManager.init(this);
        try {
            System.setOut(new PrintStream(new LoggerOutputStream(logger.getLogger(), Level.INFO), true, "UTF8"));
            System.setErr(new PrintStream(new LoggerOutputStream(logger.getLogger(), Level.SEVERE), true, "UTF8"));
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            watcher = new DirectoryWatcherService(this, ((Path) Paths.get("")), true);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (scriptsFile.exists()) {
            try {
                ZipUtils.zipDir(scriptsFile.toPath());
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        checkManager = new CheckManager(this);
        new CheckRegistery(this).registerChecks();
        OptionParser parser = new OptionParser() {
            {
                acceptsAll(asList("z", "zipMalPlugins"), "Whether to put every malicious plugin in a .zip file or not")
                        .withRequiredArg()
                        .ofType(Boolean.class)
                        .defaultsTo(false)
                        .describedAs("Zip Malicious Plugins");
                acceptsAll(asList("d", "debug"), "Whether or not to log debug messages")
                        .withRequiredArg()
                        .ofType(Boolean.class)
                        .defaultsTo(false)
                        .describedAs("All your debug messages are belong to us");
            }
        };
        OptionSet options = null;
        try {
            options = parser.parse(args);
        } catch (joptsimple.OptionException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, ex.getLocalizedMessage());
        }
        if (options != null) {
            if (options.has("zipMalPlugins")) {
                zipMaliciousPlugins = (Boolean) options.valueOf("zipMalPlugins");
            }
            if (options.has("debug")) {
                showDebugMessages = (Boolean) options.valueOf("debug");
            }
        }
    }

    @Override
    public void run() {
        init();
        if (showDebugMessages) {
            logger.debug("Should zip malicious plugins: " + zipMaliciousPlugins);
            logger.debug("Should print debug messages: " + showDebugMessages);
        }
        watcher.start();
        watcher.firstRun();
    }

    public File getMalPluginsFolder() {
        return malPluginsFolder;
    }

    public CheckManager getCheckManager() {
        return checkManager;
    }

    public boolean shouldZipMaliciousPlugins() {
        return zipMaliciousPlugins;
    }

    public boolean moveFile(String sourcePath, String targetPath) {
        boolean fileMoved = true;
        try {
            Files.move(Paths.get(sourcePath), Paths.get(targetPath), StandardCopyOption.REPLACE_EXISTING);
        } catch (Exception e) {
            fileMoved = false;
        }
        return fileMoved;
    }

    public void addMaliciousPlugin(File file) {
        maliciousPlugins.add(file);
    }

    public void zipMaliciousPlugins() {
        if (!shouldZipMaliciousPlugins()) {
            return;
        }
        if (!malPluginsFolder.exists()) {
            malPluginsFolder.mkdirs();
        }
        for (Iterator<File> iter = maliciousPlugins.iterator(); maliciousPlugins.iterator().hasNext();) {
            File element = iter.next();
            moveFile(element.getPath(), malPluginsFolder + File.separator + element.getName());
            iter.remove();
        }
        try {
            ZipUtils.zipDir(malPluginsFolder.toPath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setMaliciousPluginsFound(boolean foundMaliciousPlugins) {
        maliciousPluginsFound = foundMaliciousPlugins;
    }

    public boolean shouldLogDebugMessages() {
        return showDebugMessages;
    }

    public boolean foundMaliciousPlugins() {
        return maliciousPluginsFound;
    }

    public ConsoleReader getConsoleReader() {
        return reader;
    }

    public CustomLogger getLogger() {
        return logger;
    }

    public static void main(String[] args) {
        Main main = new Main();
        main.args = args;
        new Thread(main).start();
    }

}
