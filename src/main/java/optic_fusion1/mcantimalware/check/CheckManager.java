package optic_fusion1.mcantimalware.check;

import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.TrayIcon.MessageType;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.configuration.file.FileConfiguration;
import optic_fusion1.mcantimalware.configuration.file.YamlConfiguration;
import optic_fusion1.mcantimalware.logging.CustomLogger;
import org.apache.commons.codec.digest.DigestUtils;
public class CheckManager {

    private List<Check> checks = new ArrayList<>();
    private Main main;
    private CustomLogger logger;
    private FileConfiguration checksumDatabase;

    public CheckManager(Main main) {
        this.main = main;
        this.logger = main.getLogger();
        checksumDatabase = main.getChecksumDatabase();
    }

    public void reloadChecksumDatabase() {
        logger.info("Updating local database");
        checksumDatabase = main.getChecksumDatabase();
        logger.info("Finished updating local database");
    }

    public List<Check> getChecks() {
        return checks;
    }

    public boolean checkExists(String string) {
        return checks.stream().anyMatch((check) -> (check.getName().equalsIgnoreCase(string)));
    }

    public Check getCheck(String string) {
        for (Check check : checks) {
            if (check.getName().equalsIgnoreCase(string)) {
                return check;
            }
        }
        return null;
    }

    public void addCheck(Check check) {
        checks.add(check);
    }

    public boolean isInChecksumDatabase(File file) {
        try {
            JarFile jarFile = new JarFile(file);
            JarEntry jarEntry = jarFile.getJarEntry("plugin.yml");
            InputStream inputStream = null;
            try {
                inputStream = jarFile.getInputStream(jarEntry);
            } catch (Exception ex) {
                if(main.shouldLogDebugMessages()){
                    jarFile.close();
                    logger.exception(ex);
                    return false;
                }
            }
            if(inputStream == null){
                return false;
            }
            FileConfiguration config = YamlConfiguration.loadConfiguration(inputStream);
            if (!config.isSet("author") && !config.isSet("name")) {
                if (main.shouldLogDebugMessages()) {
                    logger.debug("author & name config sections AREN'T set");
                }
                return false;
            }
            inputStream.close();
            jarEntry = null;
            jarFile.close();
            String author = "";
            String name = "";
            if (config.isSet("author")) {
                if (main.shouldLogDebugMessages()) {
                    logger.debug("Author: " + config.getString("author"));
                }
                author = config.getString("author");
            }
            if (config.isSet("name")) {
                if (main.shouldLogDebugMessages()) {
                    logger.debug("Plugin Name: " + config.getString("name"));
                }
                name = config.getString("name");
            }
            if (name.isEmpty()) {
                return false;
            }
            String fileChecksum = DigestUtils.sha1Hex(Files.newInputStream(file.toPath()));
            if (!author.isEmpty()) {
                if (!checksumDatabase.isSet(author + "." + name)) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug(author + "." + name + " is not set");
                    }
                    return false;
                }
                List<String> checksums = checksumDatabase.getStringList(author + "." + name);
                for (String checksum : checksums) {
                    if (main.shouldLogDebugMessages()) {
                        logger.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
                    }
                    if (fileChecksum.equalsIgnoreCase(checksum)) {
                        logger.info(file.getName() + " is probably safe due to it being in the checksum database");
                        return true;
                    }
                }
                return false;
            }
            if (main.shouldLogDebugMessages()) {
                if (checksumDatabase != null) {
                    logger.debug(checksumDatabase.saveToString());
                } else {
                    logger.debug("Checksum database is null");
                }
            }
            if (!checksumDatabase.isSet(name)) {
                if (main.shouldLogDebugMessages()) {
                    logger.debug(name + " is not set");
                }
                return false;
            }
            List<String> checksums = checksumDatabase.getStringList(name);
            for (String checksum : checksums) {
                if (main.shouldLogDebugMessages()) {
                    logger.debug("File checksum: " + fileChecksum + " Database checksum: " + checksum);
                }
                if (fileChecksum.equalsIgnoreCase(checksum)) {
                    logger.info(file.getName() + " is probably safe due to it being in the checksum database");
                    return true;
                }
            }
            return false;
        } catch (IOException ex) {
            if (main.shouldLogDebugMessages()) {
                logger.exception(ex);
            }
        }
        return false;
    }

    public boolean process(String name, File file) {
        logger.info("Checking to see if " + name + " is infected");
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(file);
        } catch (IOException ex) {
            if (main.shouldLogDebugMessages()) {
                logger.exception(ex.getMessage());
            }
            return false;
        }
        if (isInChecksumDatabase(file)) {
            return true;
        }
        logger.info(file.getName() + " wasn't in the checksum database, so it will be scanned for malicious code");
        for (Check check : checks) {
            logger.info("Checking if " + name + " is infected with " + check.getName() + "(" + check.getType() + ")");
            if (check.process(name, zipFile)) {
                String fullCheckName = check.getFileName().isEmpty() ? "" : " (" + check.getFileName() + ")";
                String fullFileName = name + fullCheckName;
                logger.malicious(
                        fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getType() + ") Class Path: " + check.getClassNodePath());
                if (SystemTray.isSupported()) {
                    SystemTray tray = SystemTray.getSystemTray();
                    Image image = Toolkit.getDefaultToolkit().createImage(Main.class.getResource("/index.jpg"));
                    TrayIcon trayIcon = new TrayIcon(image, "Malware Detected");
                    trayIcon.setImageAutoSize(true);
                    trayIcon.setToolTip(fullFileName + " MIGHT be infected");
                    try {
                        tray.add(trayIcon);
                        trayIcon.displayMessage("Malware Detected", fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getType() + ") Class Path: " + check.getClassNodePath(), MessageType.WARNING);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                if (main.shouldZipMaliciousPlugins()) {
                    if (!main.foundMaliciousPlugins()) {
                        main.setMaliciousPluginsFound(true);
                    }
                    main.addMaliciousPlugin(file);
                }
            } else {
                String fullCheckName = check.getFileName().isEmpty() ? "" : " (" + check.getFileName() + ")";
                String fullFileName = name + fullCheckName;
                logger.info(
                        fullFileName + " MIGHT not be infected with " + check.getName() + "(" + check.getType() + ")");
            }
        }
        try {
            zipFile.close();
        } catch (IOException ex) {
            if (main.shouldLogDebugMessages()) {
                logger.exception(ex.toString());
            }
        }
        return false;
    }

}
