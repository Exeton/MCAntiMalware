package optic_fusion1.mcantimalware.check;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.Main;

public class CheckManager {

    private List<Check> checks = new ArrayList<>();
    private Main main;
    private Logger logger = Main.getLogger();

    public CheckManager(Main main) {
        this.main = main;
    }

    public List<Check> getChecks() {
        return checks;
    }

    public boolean checkExists(String string) {
        return checks.stream().anyMatch((check) -> (check.getName().equalsIgnoreCase(string)));
    }

    public Check getCheck(String string) {
        for (Check check : checks) {
            if (check.getName().equalsIgnoreCase(string)) {
                return check;
            }
        }
        return null;
    }

    public void addCheck(Check check) {
        checks.add(check);
    }
    
    public boolean processWithCheck(String checkName, String name, File file) {
        logger.info("Checking to see if " + name + " is infected");
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(file);
        } catch (IOException ex) {
            logger.severe(ex.getMessage());
            Logger.getLogger(CheckManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (zipFile == null) {
            logger.warning("ZipFile is null");
            return false;
        }
        for (Check check : checks) {
            if (check.getName().equalsIgnoreCase(checkName)) {
                String fileName = check.getFileName() == null ? "" : "(" + check.getName() + ")";
                String fullFileName = name + fileName;
                logger.info("Checking if " + fullFileName + " is infected with " + check.getName() + "(" + check.getType() + ")");
                if (check.process(name, zipFile)) {
                    logger.warning(fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getType() + ")");
                    if (main.shouldZipMaliciousPlugins()) {
                        if (!main.foundMaliciousPlugins()) {
                            main.setMaliciousPluginsFound(true);
                        }
                        main.addMaliciousPlugin(file);
                    }
                } else {
                    logger.info(fullFileName + " MIGHT not be infected with " + check.getName() + " (" + check.getType() + ")");
                }
            }
        }
        try {
            zipFile.close();
        } catch (IOException ex) {
            Logger.getLogger(CheckManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    public boolean process(String name, File file) {
        logger.info("Checking to see if " + name + " is infected");
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(file);
        } catch (IOException ex) {
            logger.severe(ex.getMessage());
            Logger.getLogger(CheckManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (zipFile == null) {
            logger.warning("ZipFile is null");
            return false;
        }
        for (Check check : checks) {
            String fileName = check.getFileName() == null ? "" : "(" + check.getName() + ")";
            String fullFileName = name + fileName;
            logger.info("Checking if " + fullFileName + " is infected with " + check.getName() + "(" + check.getType() + ")");
            if (check.process(name, zipFile)) {
                logger.warning(fullFileName + " MIGHT be infected with " + check.getName() + "(" + check.getType() + ")");
                if (main.shouldZipMaliciousPlugins()) {
                    if (!main.foundMaliciousPlugins()) {
                        main.setMaliciousPluginsFound(true);
                    }
                    main.addMaliciousPlugin(file);
                }
            } else {
                logger.info(fullFileName + " MIGHT not be infected with " + check.getName() + " (" + check.getType() + ")");
            }
        }
        try {
            zipFile.close();
        } catch (IOException ex) {
            Logger.getLogger(CheckManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

}
