package optic_fusion1.mcantimalware.check.checks;

import java.util.List;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.CheckType;
import optic_fusion1.mcantimalware.check.ClassnodeCheck;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.InvokeDynamicInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class FalsePositive extends ClassnodeCheck {

    private boolean foundSuspiciousCode = false;

    public FalsePositive(Main main) {
        super("FalsePositive", main, CheckType.PUP);
    }

    @Override
    public boolean detect(ClassNode classNode) {
        List<MethodNode> nodes = classNode.methods;
        MethodInsnNode method;
        for (MethodNode node : nodes) {
            for (AbstractInsnNode insnNode : node.instructions.toArray()) {
                if (insnNode instanceof InvokeDynamicInsnNode) {
                    processInvokeDynamics(insnNode);
                } else if (insnNode instanceof MethodInsnNode) {
                    method = (MethodInsnNode) insnNode;
                    if (method.owner.equals("java/io/File")) {
                        processFileStuff(method);
                    } else if (method.owner.equals("java/lang/reflect/Method")) {
                        processReflectionStuff(method);
                    }
                }
            }
        }
        return foundSuspiciousCode;
    }

    private void processInvokeDynamics(AbstractInsnNode insn) {
        if (!((InvokeDynamicInsnNode) insn).bsm.getOwner().equals("java/lang/invoke/LambdaMetafactory")) {
            foundSuspiciousCode = true;
        }
    }

    private void processFileStuff(MethodInsnNode method) {
        if (method.name.equals("createNewFile") && method.desc.equals("()Z")) {
            foundSuspiciousCode = true;
        } else if (method.name.equals("renameTo") && method.desc.equals("(Ljava/io/File;)Z")) {
            foundSuspiciousCode = true;
        } else if ((method.name.equals("delete") && method.desc.equals("()Z")) || (method.name.equals("deleteOnExit") && method.desc.equals("()V"))) {
            foundSuspiciousCode = true;
        } else if ((method.name.equals("mkdir") || method.name.equals("mkdirs")) && method.desc.equals("()Z")) {
            foundSuspiciousCode = true;
        } else if ((method.name.equals("list") && (method.desc.equals("()[Ljava/lang/String;") || method.desc.equals("(Ljava/io/FilenameFilter;)[Ljava/lang/String;"))) || (method.name.equals("listFiles") && (method.desc.equals("()[Ljava/io/File;") || method.desc.equals("(Ljava/io/FileFilter;)[Ljava/io/File;") || method.desc.equals("(Ljava/io/FilenameFilter;)[Ljava/io/File;"))) || (method.name.equals("listRoots") && method.desc.equals("()[Ljava/io/File;"))) {
            foundSuspiciousCode = true;
        }
    }

    private void processReflectionStuff(MethodInsnNode method) {
        if (method.name.equals("invoke") && method.desc.equals("(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;")) {
            foundSuspiciousCode = true;
        }
    }
}
