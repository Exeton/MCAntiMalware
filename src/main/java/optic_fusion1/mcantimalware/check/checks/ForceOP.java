package optic_fusion1.mcantimalware.check.checks;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodInsnNode;
import org.objectweb.asm.tree.MethodNode;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.Check;
import optic_fusion1.mcantimalware.check.CheckType;

public class ForceOP extends Check {

    public ForceOP(Main main) {
	super("ForceOP", main, CheckType.Malware);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
	Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            try {
                ZipEntry current = entries.nextElement();
                inputStream = zipFile.getInputStream(current);
                if (current.getName().endsWith(".class")) {
                    try {
                        ClassReader reader = new ClassReader(inputStream);
                        ClassNode node = new ClassNode();
                        reader.accept(node, 0);
                        if (detect(node)) {
                            inputStream.close();
                            return true;
                        }
                    } catch (Exception e) {
                        continue;
                    }
                }
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(Minator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(SkySneak.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    @Override
    public boolean detect(InputStream inputStream) {
	return false;
    }

    @Override
    public boolean detect(ClassNode classNode) {
	List<MethodNode> nodes = classNode.methods;
	for (MethodNode node : nodes) {
	    for(AbstractInsnNode abstractInsnNode : node.instructions.toArray()) {
        	if(abstractInsnNode instanceof MethodInsnNode) {
        	    MethodInsnNode methodInsnNode = (MethodInsnNode) abstractInsnNode;
		    if(methodInsnNode.owner.equals("org/bukkit/entity/Player")) {
        		if(methodInsnNode.name.equals("setOp") && methodInsnNode.desc.equals("(Z)V")) {
        		    return true;
        		}
        	    }
        	}
            }
        }
        return false;
    }

}
