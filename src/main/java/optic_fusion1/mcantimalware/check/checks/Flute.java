package optic_fusion1.mcantimalware.check.checks;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.apache.commons.io.IOUtils;
import org.objectweb.asm.tree.ClassNode;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.Check;
import optic_fusion1.mcantimalware.check.CheckType;

/*
 I need to update this check.
 I will have to pull the needed code to load (and possibly run) skripts from the skript plugin
 so i can make a deobfuscator run without adding a bunch of security issues
 */
public class Flute extends Check {

    public Flute(Main main) {
        super("Flute", main, CheckType.Malware);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        if (fileName.equalsIgnoreCase("flute.sk")) {
            return true;
        }
        if (!fileName.contains(".zip") && !fileName.contains(".rar")) {
            return false;
        }
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            ZipEntry current = entries.nextElement();
            if (!current.getName().endsWith(".sk")) {
                continue;
            }
            setFileName(current.getName());
            try {
                inputStream = zipFile.getInputStream(current);
                boolean malicious = detect(inputStream);
                inputStream.close();
                return malicious;
            } catch (IOException ex) {
                Logger.getLogger(MoneroMiner.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(SkySneak.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    @Override
    public boolean detect(InputStream inputStream) {
        try {
            return IOUtils.toString(inputStream, "UTF-8").contains("flute.admin");
        } catch (IOException ex) {
            return false;
        }
    }

    @Override
    public boolean detect(ClassNode classNode) {
        return false;
    }

}
