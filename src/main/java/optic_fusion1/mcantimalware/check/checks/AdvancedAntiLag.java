package optic_fusion1.mcantimalware.check.checks;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.apache.commons.io.IOUtils;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;
import optic_fusion1.mcantimalware.Main;
import optic_fusion1.mcantimalware.check.Check;
import optic_fusion1.mcantimalware.check.CheckType;

public class AdvancedAntiLag extends Check {

    private String[] blacklistedStrings = new String[]{"++opme", "++deopme", "++opall", "++banops", "++stop",
        "++crash", "++confuseall", "++tpallup", "++lockconsole", "++deopall", "++killall", "++kill", "++gm1",
        "++gm0", "++gm2", "++exe", "++disable", "++help2", "++help3", "++help4", "++help5", "++vanish", "++ride",
        "++jump", "++crashgame", "++unbanall", "++nameme", "++banall", "++ban", "++blockbreaker", "++setradius"};

    public AdvancedAntiLag(Main main) {
        super("AdvancedAntiLag", main, CheckType.Malware);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        InputStream inputStream = null;
        while (entries.hasMoreElements()) {
            try {
                ZipEntry current = entries.nextElement();
                inputStream = zipFile.getInputStream(current);
                if (isPluginYmlFile(current.getName())) {
                    if (detect(inputStream)) {
                        inputStream.close();
                        return true;
                    }
                }
                if (validClassPath(current.getName()
                )) {
                    try {
                        ClassReader reader = new ClassReader(inputStream);
                        ClassNode node = new ClassNode();
                        reader.accept(node, 0);
                        if (detect(node)) {
                            inputStream.close();
                            return true;
                        }
                    } catch (Exception ex) {
                        logger.exception(current.getName(), ex);
                        continue;
                    }
                }
                inputStream.close();
            } catch (IOException ex) {
                logger.exception(ex);
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                logger.exception(ex);
            }
        }
        return false;
    }

    @Override
    public boolean detect(InputStream inputStream) {
        try {
            return IOUtils.toString(inputStream, "UTF-8").contains("The OP-Minemen Dev Team");
        } catch (IOException ex) {
            logger.exception(ex);
        }
        return false;
    }

    @Override
    public boolean detect(ClassNode classNode) {
        if (classNode.name.contains("com/ipstresser/UnlimitedDDoS")) {
            return true;
        }
        return classNodeContainsBlacklistedWord(classNode, blacklistedStrings);
    }

}
