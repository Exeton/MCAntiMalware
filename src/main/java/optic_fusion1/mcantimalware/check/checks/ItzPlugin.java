package optic_fusion1.mcantimalware.check.checks;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import optic_fusion1.mcantimalware.check.Check;
import optic_fusion1.mcantimalware.check.CheckType;
import optic_fusion1.mcantimalware.Main;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;

public class ItzPlugin extends Check {

    private String[] blacklistedMethodNames = new String[]{
        "makeThisUndeletable",
        "lagg",
        "crash",
        "Destroy",
        "Nuke"};

    private String[] blacklistedStrings = new String[]{
        "org/bukkit/important.txt",
        "org/bukkit/Crash.class",
        "§cServer griefed by §a§l§o",
        "§c§l§k###§4§lHACKED§c§l§k###",
        "Cytexal",
        "Anglizisman"};

    public ItzPlugin(Main main) {
        super("ItzPlugin", main, CheckType.Malware);
    }

    @Override
    public boolean process(String fileName, ZipFile zipFile) {
        Enumeration zipEntries = zipFile.entries();
        InputStream inputStream = null;
        while (zipEntries.hasMoreElements()) {
            ZipEntry currentZipEntry = (ZipEntry) zipEntries.nextElement();
            try {
                inputStream = zipFile.getInputStream(currentZipEntry);
            } catch (IOException ex) {
                Logger.getLogger(ItzPlugin.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (currentZipEntry.getName().endsWith(".class")) {
                try {
                    ClassReader reader = new ClassReader(inputStream);
                    ClassNode node = new ClassNode();
                    reader.accept(node, 0);
                    if (detect(node)) {
                        inputStream.close();
                        return true;
                    }
                    inputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(ItzPlugin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (inputStream != null) {
            try {
                inputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(SkySneak.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    @Override
    public boolean detect(InputStream inputStream) {
        return false;
    }

    @Override
    public boolean detect(ClassNode classNode) {
        if (classNode.name.contains("com/Cytexal/Nick/")) {
            return true;
        }

        List<MethodNode> nodes = classNode.methods;
        for (MethodNode node : nodes) {
            if (classNode.superName.contains("com/Cytexal/Nick/")) {
                for (String string : blacklistedMethodNames) {
                    if (node.name.equalsIgnoreCase(string)) {
                        return true;
                    }
                }
            }
        }
        return classNodeContainsBlacklistedWord(classNode, blacklistedStrings);
    }

}
