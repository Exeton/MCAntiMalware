package optic_fusion1.mcantimalware.check;

import java.io.InputStream;
import java.util.List;
import java.util.zip.ZipFile;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodNode;
import optic_fusion1.mcantimalware.Main;

public abstract class Check {

    private Main main;
    private String name;
    private CheckType type;
    private String fileName = "";

    public Check(String name, Main main, CheckType type) {
	this.name = name;
	this.main = main;
	this.type = type;
    }

    public Main getMain() {
	return main;
    }

    public void setFileName(String fileName) {
	this.fileName = fileName;
    }

    public String getFileName() {
	return fileName;
    }

    public CheckType getType() {
	return type;
    }

    public String getName() {
	return name;
    }

    public abstract boolean process(String fileName, ZipFile zipFile);

    public abstract boolean detect(InputStream inputStream);

    public abstract boolean detect(ClassNode classNode);

    public boolean classNodeContainsBlacklistedWord(ClassNode classNode, String[] blacklistedStrings) {
	List<MethodNode> nodes = classNode.methods;
	for (MethodNode node : nodes) {
	    for (AbstractInsnNode insnNode : node.instructions.toArray()) {
		if (insnNode instanceof LdcInsnNode && ((LdcInsnNode) insnNode).cst instanceof String) {
		    String string = ((LdcInsnNode) insnNode).cst.toString();
		    for (String word : blacklistedStrings) {
			if (string.equalsIgnoreCase(word)) {
			    return true;
			}
		    }
		}
	    }
	}
	return false;
    }
    
    public boolean isPluginYmlFile(String fileName) {
	return fileName.equalsIgnoreCase("plugin.yml");
    }

    public boolean isTextFile(String fileName) {
	return fileName.endsWith(".yml") || fileName.endsWith(".txt") || fileName.endsWith(".sk") || isPluginYmlFile(fileName);
    }

}
